import Synergex.TestFramework

namespace UnitTests

    {TestClass}
    public class ReturnNumberTests

        private testsRun, int
;
;       No support for these yet.
;
;        {AssemblyInitialize}
;        public method AssemblyInitialize, void
;        proc
;        endmethod
;
;        {AssemblyCleanup}
;        public method AssemblyCleanup, void
;        proc
;        endmethod
;
        {ClassInitialize}
        public method ClassInitialize, void
        proc
            Console.WriteLine("In ClassInitialize")
        endmethod

        {ClassCleanup}
        public method ClassCleanup, void
        proc
            Console.WriteLine("In ClassCleanup")
            Console.WriteLine("A total of " + %string(testsRun) + " tests were run")
        endmethod

        {TestInitialize}
        public method TestInitialize, void
            record
                propertyValue, string
            endrecord
        proc
            Console.WriteLine("In TestInitialize")

            ;Some issues here, we're working on it!
;            ;Do we have a "Test file" property in the test we're about to run?
;            if (TestProperties.TryGetProperty("TestFile",propertyValue))
;            begin
;                Console.WriteLine("TestFile is " + %atrim(propertyValue))
;            end

        endmethod
        
        {TestCleanup}
        public method TestCleanup, void
        proc
            Console.WriteLine("In TestCleanup")
        endmethod
        
        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn1, void
        proc
            testsRun+=1
            Assert.AreEqual(%return1,1,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn2, void
        proc
            testsRun+=1
            Assert.AreEqual(%return2,2,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn3, void
        proc
            testsRun+=1
            Assert.AreEqual(%return3,3,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn4, void
        proc
            testsRun+=1
            Assert.AreEqual(%return4,4,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn5, void
        proc
            testsRun+=1
            Assert.AreEqual(%return5,5,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        {Ignore("We know this fails and we're working on it!")}
        {Owner("Steve Ives")}
        {TestProperty("TestFile","TestReturn6.txt")}
        public method TestReturn6, void
        proc
            testsRun+=1
            Assert.AreEqual(6,%return6,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn7, void
        proc
            testsRun+=1
            Assert.AreEqual(%return7,7,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn8, void
        proc
            testsRun+=1
            Assert.AreEqual(%return8,8,0)
        endmethod

        {TestMethod}
        {TestCategory("Stupid Number Tests")}
        public method TestReturn9, void
        proc
            testsRun+=1
            Assert.AreEqual(%return9,9,0)
        endmethod

    endclass

endnamespace